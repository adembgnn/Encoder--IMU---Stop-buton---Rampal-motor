/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body (Mecanum Robot v1.5 - Final Corrected)
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include <stdlib.h>
#include <ctype.h>
#include "kalman_angle.h"
#include "string.h"
#include "kalman.h"
#include "math.h"
#include "bno055_stm32.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
// Note: MotorState_t is defined in main.h

typedef enum {
    DIR_FORWARD,
    DIR_BACKWARD
} MotorDirection_t;

typedef struct {
    TIM_HandleTypeDef* htim;
    uint32_t            last_count_u32; // For wrap-safe calculation
    float               speed_rpm;
    uint32_t            last_update_ms;
    float               total_distance_cm;
    Kalman_t            speed_filter;
} EncoderInfo_t;

typedef struct {
    TIM_HandleTypeDef* htim;
    uint32_t            channel;
    GPIO_TypeDef* dir_port;
    uint16_t            dir_pin;
    MotorDirection_t    dir;
    uint32_t            target_pwm;
    uint32_t            current_pwm;
} MotorCtrl_t;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define RAMP_STEP 150
#define ENCODER_PPR (120000.0f)
#define DEBUG_MODE_TERMIT 1
#define MAX_PWM 2000.0f
#define MAX_MOTOR_RPM 250.0f
#define MOTOR_SOL_ON   0
#define MOTOR_SAG_ON   1
#define MOTOR_SOL_ARKA 2
#define MOTOR_SAG_ARKA 3
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c2;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim11;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
// --- Global Değişkenler ---
KalmanAngle_t aciFiltresi_Roll;
KalmanAngle_t aciFiltresi_Pitch;
char g_tx_buffer[256];
volatile bool g_acil_stop_aktif = true;
volatile MotorState_t g_current_robot_state = MOTOR_DURDU;
volatile float g_son_vx = 0.0f;
volatile float g_son_vy = 0.0f;
volatile float g_son_w = 0.0f;
EncoderInfo_t g_encoders[4]; // 0:FL, 1:FR, 2:BL, 3:BR
MotorCtrl_t g_motors[4];   // 0:FL, 1:FR, 2:BL, 3:BR
float g_ortalama_mesafe_cm = 0.0f;
// UART RX Buffer for string commands
uint8_t g_uart_rx_byte;
char g_rx_buffer[RX_BUFFER_SIZE];
volatile uint8_t g_rx_buffer_index = 0;
volatile bool g_new_command_received = false;
volatile uint32_t g_last_telemetry_time = 0;
volatile uint32_t g_last_buzzer_toggle_time = 0;
bool imu_baslatildi = false;
volatile bool g_robot_calisiyor = false;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_I2C2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM11_Init(void);
/* USER CODE BEGIN PFP */
void SetRobotMovement(float vx, float vy, float w);
void UpdatePWMWithRamp(void);
void UpdateSensorCalculations(float delta_time_sec);
void PrintTelemetryToConsole(void);
void ProcessJetsonCommand(char* buffer);
void SendTelemetryToJetson(void);
int _write(int file, char *ptr, int len);
void I2C_Scanner(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_I2C2_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_TIM5_Init();
  MX_TIM11_Init();
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // BR
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // BL
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // FL
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // FR

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);

  HAL_UART_Receive_IT(&huart2, &g_uart_rx_byte, 1);

  g_motors[0] = (MotorCtrl_t){&MOTOR_FL_PWM_TIM, MOTOR_FL_PWM_CHANNEL, MOTOR_FL_DIR_PORT, MOTOR_FL_DIR_PIN};
  g_motors[1] = (MotorCtrl_t){&MOTOR_FR_PWM_TIM, MOTOR_FR_PWM_CHANNEL, MOTOR_FR_DIR_PORT, MOTOR_FR_DIR_PIN};
  g_motors[2] = (MotorCtrl_t){&MOTOR_BL_PWM_TIM, MOTOR_BL_PWM_CHANNEL, MOTOR_BL_DIR_PORT, MOTOR_BL_DIR_PIN};
  g_motors[3] = (MotorCtrl_t){&MOTOR_BR_PWM_TIM, MOTOR_BR_PWM_CHANNEL, MOTOR_BR_DIR_PORT, MOTOR_BR_DIR_PIN};

  g_encoders[0].htim = &htim5; //sol ön
  g_encoders[1].htim = &htim2; //sağ ön
  g_encoders[2].htim = &htim3; //sol arka
  g_encoders[3].htim = &htim4; //sağ arka

  float Q_hiz = 0.01f, P_hiz = 1.0f;
  uint32_t now = HAL_GetTick(); // Bu satırı döngünün üzerine ekleyin
    for(int i=0; i < 4; i++) {
        g_encoders[i].last_count_u32 = (uint32_t)__HAL_TIM_GET_COUNTER(g_encoders[i].htim);
        g_encoders[i].last_update_ms = now; // Bu satırı ekleyin
        Kalman_Init(&g_encoders[i].speed_filter, Q_hiz, R_HIZ_NORMAL, P_hiz, 0.0f);
    }

  float Q_angle = 0.001f, Q_bias = 0.03f, R_measure = 0.03f;
  Kalman_InitAngle(&aciFiltresi_Roll, Q_angle, Q_bias, R_measure);
  Kalman_InitAngle(&aciFiltresi_Pitch, Q_angle, Q_bias, R_measure);

  I2C_Scanner();
  bno055_assignI2C(&hi2c2);
  bno055_setup();
  bno055_setOperationModeNDOF();
  HAL_Delay(100);
 uint8_t chip_id = 0;
  bno055_readData(BNO055_CHIP_ID, &chip_id, 1);
  imu_baslatildi = (chip_id == BNO055_ID);
  printf("BNO055 Durumu: %s\n", imu_baslatildi ? "Basarili" : "HATA");


  printf("Mecanum Robot v1.5 - Hazir.\n");
    printf("Komut listesi:\n");
    printf("  - ileri        : Robotu ileri hareket ettirir.\n");
    printf("  - geri         : Robotu geri hareket ettirir.\n");
    printf("  - tamsagkayma  : Robotu tam sağa doğru kaydırır.\n");
    printf("  - tamsolkayma  : Robotu tam sola doğru kaydırır.\n");
    printf("  - hafifsagkayma: Robotu hafif sağa doğru kaydırır.\n");
    printf("  - hafifsolkayma: Robotu hafif sola doğru kaydırır.\n");
    printf("  - donsag       : Robotu kendi ekseni etrafinda sağa döndürür.\n");
    printf("  - donsol       : Robotu kendi ekseni etrafinda sola döndürür.\n");
    printf("  - don_180      : Robotu 180 derece döndürür.\n");
    printf("  - dur          : Robotu durdurur.\n");
    printf("\n");
    fflush(stdout);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_calculation_time = HAL_GetTick();
  g_last_telemetry_time = HAL_GetTick();
  uint32_t last_rgb_toggle_time = 0;

  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GetTick() - last_rgb_toggle_time >= 2000) // 2000 ms = 2 saniye
	        {
	            last_rgb_toggle_time = HAL_GetTick(); // Zamanı güncelle
	            HAL_GPIO_TogglePin(RGB_GPIO_Port, RGB_Pin); // PB0 pinini toggle yap
	        }
	  if (g_new_command_received)
	      {
	          ProcessJetsonCommand((char*)g_rx_buffer);
	          // Buffer'ı ve bayrağı bir sonraki komut için temizle
	          g_rx_buffer_index = 0;
	          memset(g_rx_buffer, 0, RX_BUFFER_SIZE);
	          g_new_command_received = false;
	      }

	      // 2. Motor PWM ve sensör hesaplamalarını periyodik olarak güncelle
	  if (HAL_GetTick() - last_calculation_time >= RAMP_UPDATE_PERIOD_MS) {

	  	          // 1. ADIM: GEÇEN SÜREYİ HESAPLA
	  	          uint32_t now = HAL_GetTick();
	  	          float delta_time_sec = (now - last_calculation_time) / 1000.0f;
	  	          last_calculation_time = now;

	                // Çok kısa süre geçtiyse (bölme hatası önlemi) veya ilk döngüyse atla
	                if (delta_time_sec <= 0.0f) continue;

	  	          // 2. ADIM: SENSÖRLERİ OKU (GEÇEN SÜREYİ KULLANARAK)
	  	          UpdateSensorCalculations(delta_time_sec);


	  	          // 4. ADIM: MOTORLARI SÜR
	  	          UpdatePWMWithRamp();
	  	      }
	      // 3. Telemetri verisini periyodik olarak gönder
	      if (HAL_GetTick() - g_last_telemetry_time >= TELEMETRY_PERIOD_MS) {
	                g_last_telemetry_time = HAL_GetTick();

	                #if (DEBUG_MODE_TERMIT == 1)
	                    // Insan tarafindan okunabilir, detayli telemetriyi konsola yaz
	                    PrintTelemetryToConsole();
	                #else
	                    // Jetson icin ozel formatli telemetriyi gonder
	                    SendTelemetryToJetson();
	                #endif
	            }

	      // 4. Geri hareket sırasında buzzer'ı çalıştır
	      if (g_current_robot_state == MOTOR_GERI && g_robot_calisiyor) { // g_run_button_is_pressed yerine g_robot_calisiyor kullanıldı
	          if (HAL_GetTick() - g_last_buzzer_toggle_time >= BUZZER_TOGGLE_PERIOD_MS) {
	              HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
	              g_last_buzzer_toggle_time = HAL_GetTick();
	          }
	      } else {
	          HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
	      }
	    }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
  hi2c2.Init.ClockSpeed = 100000;
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 8999;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 12;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 12;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 65535;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 12;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 12;
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 0;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 4294967295;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}

/**
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
  htim11.Init.Prescaler = 0;
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim11.Init.Period = 65535;
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|SAG_ARKA_MOTOR_DIR_Pin|SOL_ARKA_MOTOR_DIR_Pin|SOL_ON_MOTOR_DIR_Pin
                          |SAG_ON_MOTOR_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_GPIO_Port, RGB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUZZER_Pin SAG_ARKA_MOTOR_DIR_Pin SOL_ARKA_MOTOR_DIR_Pin SOL_ON_MOTOR_DIR_Pin
                           SAG_ON_MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|SAG_ARKA_MOTOR_DIR_Pin|SOL_ARKA_MOTOR_DIR_Pin|SOL_ON_MOTOR_DIR_Pin
                          |SAG_ON_MOTOR_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : ACIL_STOP_BUTON_Pin */
  GPIO_InitStruct.Pin = ACIL_STOP_BUTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(ACIL_STOP_BUTON_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : RGB_Pin */
  GPIO_InitStruct.Pin = RGB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RGB_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

static int32_t encoder_delta_uint32(uint32_t prev, uint32_t curr, uint32_t timer_max_plus_one)
{
    uint32_t half_max = timer_max_plus_one / 2;
    int32_t diff = (int32_t)(curr - prev);

    if (diff > half_max) {
        diff = diff - timer_max_plus_one;
    } else if (diff < -half_max) {
        diff = diff + timer_max_plus_one;
    }
    return diff;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == USART2)
    {
        // Gelen karakter yeni satır ('\n') veya satır başı ('\r') karakteri mi?
        if (g_uart_rx_byte == '\n' || g_uart_rx_byte == '\r')
        {
            if (g_rx_buffer_index > 0) // Eğer buffer boş değilse komut tamamlanmıştır.
            {
                g_rx_buffer[g_rx_buffer_index] = '\0'; // String'i bitir.
                g_new_command_received = true;         // Ana döngüye yeni komutun geldiğini haber ver.
            }
        }
        else // Eğer normal bir karakter geldiyse
        {
            // Buffer'ı taşırmadan karakteri diziye ekle
            if (g_rx_buffer_index < RX_BUFFER_SIZE - 1)
            {
                g_rx_buffer[g_rx_buffer_index++] = g_uart_rx_byte;
            }
        }

        // Bir sonraki karakteri dinlemeye devam et.
        HAL_UART_Receive_IT(&huart2, &g_uart_rx_byte, 1);
    }
}


void SetSingleMotor(TIM_HandleTypeDef* htim, uint32_t channel, GPIO_TypeDef* dir_port, uint16_t dir_pin, MotorDirection_t dir, uint32_t speed)
{
    if (speed == 0) {
        __HAL_TIM_SET_COMPARE(htim, channel, 0);
        return; // Don't change direction if stopping
    }
    HAL_GPIO_WritePin(dir_port, dir_pin, (dir == DIR_FORWARD) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    __HAL_TIM_SET_COMPARE(htim, channel, speed);
}

void UpdatePWMWithRamp(void)
{
    for(int i=0; i<4; i++){
        if (g_motors[i].current_pwm < g_motors[i].target_pwm) {
            g_motors[i].current_pwm += RAMP_STEP;
            if(g_motors[i].current_pwm > g_motors[i].target_pwm) g_motors[i].current_pwm = g_motors[i].target_pwm;
        } else if (g_motors[i].current_pwm > g_motors[i].target_pwm) {
            if(g_motors[i].current_pwm < RAMP_STEP) g_motors[i].current_pwm = 0;
            else g_motors[i].current_pwm -= RAMP_STEP;
        }
        SetSingleMotor(g_motors[i].htim, g_motors[i].channel, g_motors[i].dir_port, g_motors[i].dir_pin, g_motors[i].dir, g_motors[i].current_pwm);
    }
}

void SetRobotMovement(float vx, float vy, float w)
{
    float wheel_speeds[4];
    wheel_speeds[MOTOR_SOL_ON]   = vx - vy + w;
    wheel_speeds[MOTOR_SAG_ON]   = vx + vy - w;
    wheel_speeds[MOTOR_SOL_ARKA] = vx + vy + w;
    wheel_speeds[MOTOR_SAG_ARKA] = vx - vy - w;

    float max_speed = 0.0f;
    for (int i = 0; i < 4; i++) {
        if (fabsf(wheel_speeds[i]) > max_speed) {
            max_speed = fabsf(wheel_speeds[i]);
        }
    }
    if (max_speed > 1.0f) {
        for (int i = 0; i < 4; i++) {
            wheel_speeds[i] /= max_speed;
        }
    }

    // Hızı (-1.0 ile 1.0 arası) doğrudan hedef PWM'e ve yöne çevir
    for (int i = 0; i < 4; i++) {

            // Sağ Ön (indeks 1) ve Sağ Arka (indeks 3) motorların yönünü TERS ÇEVİR
            if (i == MOTOR_SAG_ON || i == MOTOR_SAG_ARKA) {
                // Ters Mantık: Yazılım 'ileri' dediğinde motor 'geri' dönsün
                if (wheel_speeds[i] >= 0) {
                    g_motors[i].dir = DIR_BACKWARD; // Pozitif hız = Geri dön
                } else {
                    g_motors[i].dir = DIR_FORWARD;  // Negatif hız = İleri dön
                }
            }
            else {
                // Normal Mantık (Sol taraf motorları için)
                if (wheel_speeds[i] >= 0) {
                    g_motors[i].dir = DIR_FORWARD;
                } else {
                    g_motors[i].dir = DIR_BACKWARD;
                }
            }

            // PWM değeri her zaman hızın mutlak değeri olduğu için bu satır aynı kalır
            g_motors[i].target_pwm = (uint32_t)(fabsf(wheel_speeds[i]) * MAX_PWM);
        }

    // Geri giderken buzzer için durumu güncelle
    if (vx < 0) {
        g_current_robot_state = MOTOR_GERI;
    } else if (vx == 0 && vy == 0 && w == 0) {
        g_current_robot_state = MOTOR_DURDU;
    } else {
        g_current_robot_state = MOTOR_ILERI;
    }
}

void UpdateSensorCalculations(float delta_time_sec)
{
    // DEĞİŞİKLİK: Fonksiyonun başındaki tüm zaman hesaplama kodları (static değişken, if, now, vb.) SİLİNDİ.

    // --- Enkoder Hesaplamaları ---
    for(int i=0; i<4; i++)
    {
        // delta_time_sec'i burada tekrar hesaplamıyoruz, parametre olarak gelen hazır değeri kullanıyoruz.

        uint32_t current_count_u32 = (uint32_t)__HAL_TIM_GET_COUNTER(g_encoders[i].htim);
        uint32_t timer_max = __HAL_TIM_GET_AUTORELOAD(g_encoders[i].htim);
        int32_t count_delta = encoder_delta_uint32(g_encoders[i].last_count_u32, current_count_u32, timer_max + 1);
        g_encoders[i].last_count_u32 = current_count_u32;

        // Parametre olarak gelen tek delta_time_sec'i kullan
        float raw_speed_rpm = ((float)count_delta / ENCODER_PPR) / (delta_time_sec / 60.0f);

        // ... (Kalman filtre kodun aynı kalacak) ...
        float filtered_speed = Kalman_Update(&g_encoders[i].speed_filter, raw_speed_rpm);
        if (fabsf(raw_speed_rpm) < 1.0f) {
            filtered_speed = 0.0f;
            Kalman_Reset(&g_encoders[i].speed_filter, 0.0f);
        }
        g_encoders[i].speed_rpm = filtered_speed;

        float revolutions = (float)count_delta / ENCODER_PPR;
        float delta_cm = revolutions * WHEEL_CIRCUMFERENCE_CM;
        g_encoders[i].total_distance_cm += delta_cm;
    }

    // Ortalama mesafeyi hesapla
    g_ortalama_mesafe_cm = (g_encoders[0].total_distance_cm + g_encoders[1].total_distance_cm + g_encoders[2].total_distance_cm + g_encoders[3].total_distance_cm) / 4.0f;

    // --- IMU Hesaplamaları ---
    if (imu_baslatildi) {
        // Parametre olarak gelen aynı delta_time_sec değerini kullan.
        bno055_vector_t accel = bno055_getVectorAccelerometer();
        bno055_vector_t gyro = bno055_getVectorGyroscope();
        float roll_acc = atan2f(accel.y, accel.z) * 180.0f / M_PI;
        Kalman_UpdateAngle(&aciFiltresi_Roll, roll_acc, gyro.x, delta_time_sec);
        float pitch_acc = atan2f(-accel.x, sqrtf(accel.y * accel.y + accel.z * accel.z)) * 180.0f / M_PI;
        Kalman_UpdateAngle(&aciFiltresi_Pitch, pitch_acc, gyro.y, delta_time_sec);
    }
}

void PrintTelemetryToConsole(void)
{
    // Motor isimlerini bir dizide tutarak çıktıyı daha okunabilir hale getirelim.
    const char* motor_names[4] = {"Sol On  ", "Sag On  ", "Sol Arka", "Sag Arka"};

    printf("--- Telemetri ---\n");
    for(int i=0; i<4; i++){
        // Yeni telemetri formatı: Hedef PWM, Gerçek Hız (RPM) ve Mesafe (cm)
        printf("%-9s -> Hedef PWM: %4u | Hiz: %6.1f RPM | Mesafe: %7.2f cm\n",
               motor_names[i],
               (unsigned int)g_motors[i].target_pwm,
               g_encoders[i].speed_rpm,
               g_encoders[i].total_distance_cm);
    }
    if (imu_baslatildi) {
           bno055_vector_t euler = bno055_getVectorEuler();
           // Üç açıyı da daha okunaklı bir formatta yazdırıyoruz
           printf("IMU Yaw: %6.1f\n", euler.x);
           printf("IMU Pitch: %6.1f\n", euler.z);
           printf("IMU Roll: %6.1f\n", euler.y);
       }
    printf("\n");
    fflush(stdout);
}
void SendTelemetryToJetson(void)
{
    // Bu format, Jetson'daki kodun veriyi doğru ayrıştırması (parse) için önemlidir.
    // Türkçe karakter veya boşluk olmadan, standart anahtarlar (keys) kullanalım.
    // Örnek: "FL_rpm:120.5,FR_rpm:119.8,..."
    int len = snprintf(g_tx_buffer, sizeof(g_tx_buffer),
        "FL_rpm:%.1f,FR_rpm:%.1f,BL_rpm:%.1f,BR_rpm:%.1f,Yaw:%.1f,Mesafe:%.2f\n",
        g_encoders[MOTOR_SOL_ON ].speed_rpm, g_encoders[MOTOR_SAG_ON].speed_rpm,
        g_encoders[MOTOR_SOL_ARKA].speed_rpm, g_encoders[MOTOR_SAG_ARKA].speed_rpm,
        bno055_getVectorEuler().x, g_ortalama_mesafe_cm);

    if(len > 0){
        HAL_UART_Transmit(&huart2, (uint8_t*)g_tx_buffer, len, 100);
    }
}

void ProcessJetsonCommand(char* buffer)
{
    // Hız değerlerini tanımla
    const float FULL_SPEED = 1.0f;     // Tam hız için %100 güç

    float vx = 0.0f, vy = 0.0f, w = 0.0f;

    if (strcmp(buffer, "stop") == 0) {
           // Hızlar zaten sıfır, SetRobotMovement çağrılacak.
           printf("Komut: dur. Robot duruyor.\n");
           g_robot_calisiyor = false;
       } else if (strcmp(buffer, "forward") == 0) {
           vx = FULL_SPEED;
           g_robot_calisiyor = false;
           printf("Komut: ileri. Robot ileri hareket ediyor.\n");
       } else if (strcmp(buffer, "back") == 0) {
           vx = -FULL_SPEED;
           g_robot_calisiyor = true;
           printf("Komut: geri. Robot geri hareket ediyor.\n");

       } else if (strcmp(buffer, "left") == 0) {
           vy = FULL_SPEED; // <-- DÜZELTİLDİ
           printf("Komut: sol. Robot sola donuyor.\n");
           g_robot_calisiyor = false;
       } else if (strcmp(buffer, "right") == 0) {
           vy = -FULL_SPEED; // <-- DÜZELTİLDİ
           g_robot_calisiyor = false;
           printf("Komut: sag. Robot saga donuyor.\n");
       }  else {
           // Bilinmeyen komut
           printf("Bilinmeyen komut: %s\n", buffer);
           g_robot_calisiyor = false;
           return;
       }

    SetRobotMovement(vx, vy, w);
}

int _write(int file, char *ptr, int len) { HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 100); return len; }

void I2C_Scanner(void)
{
  printf("I2C Hatti Taraniyor...\n");
  fflush(stdout);
  uint8_t device_count = 0;
  for(uint8_t i = 1; i < 128; i++)
  {
    if (HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i << 1), 2, 10) == HAL_OK)
    {
      printf("--> I2C cihazi bulundu, adres: 0x%02X\n", i);
      fflush(stdout);
      device_count++;
    }
  }
  if (device_count == 0) {
    printf("--> Tarama tamamlandi, hatta bagli cihaz bulunamadi.\n");
  } else {
    printf("--> Tarama tamamlandi. Toplam %d cihaz bulundu.\n", device_count);
  }
  fflush(stdout);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
