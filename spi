/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body (Mecanum Robot v1.5 - Final Corrected)
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include <stdlib.h>
#include <ctype.h>
#include "kalman_angle.h"
#include "string.h"
#include "kalman.h"
#include "math.h"
#include "bno055_stm32.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
// Note: MotorState_t is defined in main.h

typedef enum {
    ROBOT_CMD_STOP = 0x00,
    ROBOT_CMD_FORWARD = 0x01,
    ROBOT_CMD_BACKWARD = 0x02,
    ROBOT_CMD_STRAFE_RIGHT = 0x03,
    ROBOT_CMD_STRAFE_LEFT = 0x04,
    ROBOT_CMD_MANEUVER_TURN_360_RIGHT = 0x05,
    ROBOT_CMD_MANEUVER_TURN_360_LEFT = 0x06
} RobotCommand_ID;

// Robotun anlık durumunu takip etmek için (özellikle 360 derece manevrası için)
typedef enum {
    ROBOT_STATE_IDLE,         // Boşta, yeni komut bekliyor
    ROBOT_STATE_CONTINUOUS,   // Sürekli hareket halinde (ileri, geri, kayma)
    ROBOT_STATE_MANEUVERING   // Görev yapıyor (360 derece dönüyor)
} RobotState_t;

typedef struct {
    uint16_t sensor_values[8];
    uint32_t last_update_ms;
} LineSensor_t;

// Jetson'dan STM32'ye gelecek basitleştirilmiş komut paketi
typedef struct {
  uint8_t command_id;       // Yukarıda tanımladığımız komut numarası (0, 1, 2 vb.)
  uint8_t checksum;         // Basit veri doğrulama
  uint8_t padding[34];
} JetsonToStm_CommandPacket;
// STM32'den Jetson'a gönderilecek telemetri verileri
typedef struct __attribute__((packed)){
  float speed_rpm_fl;       // Sol Ön motor hızı
  float speed_rpm_fr;       // Sağ Ön motor hızı
  float speed_rpm_bl;       // Sol Arka motor hızı
  float speed_rpm_br;       // Sağ Arka motor hızı
  float imu_yaw;            // IMU Yaw açısı
  float imu_roll;           // IMU Roll açısı
  float imu_pitch;          // IMU Pitch açısı
  float total_distance_cm;  // Ortalama kat edilen mesafe
  uint8_t status_flags;     // Robot durumu (örn: 0x01 = Engel Algılandı)
  uint8_t checksum;         // Basit veri doğrulama
  uint8_t padding[2];
} StmToJetson_TelemetryPacket;

typedef enum {
    LED_YAK = 0x01,
    LED_SONDUR = 0x02,
} SlaveToMaster_Statusler;

typedef struct {
    uint8_t status_id;
} SlaveToMaster_StatusPacket;

typedef enum {
    DIR_FORWARD,
    DIR_BACKWARD
} MotorDirection_t;

typedef struct {
    TIM_HandleTypeDef* htim;
    uint32_t            last_count_u32; // For wrap-safe calculation
    float               speed_rpm;
    uint32_t            last_update_ms;
    float               total_distance_cm;
    Kalman_t            speed_filter;
} EncoderInfo_t;

typedef struct {
    TIM_HandleTypeDef* htim;
    uint32_t            channel;
    GPIO_TypeDef* dir_port;
    uint16_t            dir_pin;
    MotorDirection_t    dir;
    uint32_t            target_pwm;
    uint32_t            current_pwm;
} MotorCtrl_t;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define LINE_SENSOR_COUNT 8
#define SENSOR_THRESHOLD 2500
#define RAMP_STEP 150
#define ENCODER_PPR (120000.0f)
#define DEBUG_MODE_TERMIT 1
#define MAX_PWM 2000.0f
#define MAX_MOTOR_RPM 250.0f
#define MOTOR_SOL_ON   0
#define MOTOR_SAG_ON   1
#define MOTOR_SOL_ARKA 2
#define MOTOR_SAG_ARKA 3
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

I2C_HandleTypeDef hi2c2;

SPI_HandleTypeDef hspi2;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim11;

/* USER CODE BEGIN PV */
// --- Global Değişkenler ---
uint16_t sensor_values[LINE_SENSOR_COUNT];
volatile bool g_line_tracking_active = false;
volatile StmToJetson_TelemetryPacket g_spi_tx_packet;
KalmanAngle_t aciFiltresi_Roll;
KalmanAngle_t aciFiltresi_Pitch;
KalmanAngle_t aciFiltresi_Yaw;
volatile MotorState_t g_current_robot_state = MOTOR_DURDU;
EncoderInfo_t g_encoders[4]; // 0:FL, 1:FR, 2:BL, 3:BR
MotorCtrl_t g_motors[4];   // 0:FL, 1:FR, 2:BL, 3:BR
float g_ortalama_mesafe_cm = 0.0f;
// UART RX Buffer for string commands
volatile JetsonToStm_CommandPacket g_spi_rx_packet;
// volatile SlaveToMaster_StatusPacket g_spi_tx_packet;
volatile uint32_t g_last_buzzer_toggle_time = 0;
bool imu_baslatildi = false;
volatile bool g_robot_calisiyor = false;
volatile RobotState_t g_robot_anlik_durum = ROBOT_STATE_IDLE;
volatile float g_hedef_yaw = 0.0f;
volatile bool g_manevra_basladi = false;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_I2C2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM11_Init(void);
static void MX_SPI2_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void ReadLineSensors(void);
void ControlRobotWithLineSensor(void);
void SetRobotMovement(float vx, float vy, float w);
void UpdatePWMWithRamp(void);
void UpdateSensorCalculations(float delta_time_sec);
void I2C_Scanner(void);
uint8_t crc8(const uint8_t* data, size_t len);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_I2C2_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_TIM5_Init();
  MX_TIM11_Init();
  MX_SPI2_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  	MX_ADC1_Init();
    HAL_ADCEx_Calibration_Start(&hadc1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // BR
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // BL
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // FL
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // FR

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);

  	printf("Mecanum Robot v1.6 - SPI Modu Aktif\n");
    printf("BNO055 Durumu: %s\n", imu_baslatildi ? "Basarili" : "HATA");
    printf("Jetson'dan SPI komutları bekleniyor...\n");
    fflush(stdout);

    // İlk SPI iletişimini başlat
    if (HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t*)&g_spi_tx_packet, (uint8_t*)&g_spi_rx_packet, sizeof(StmToJetson_TelemetryPacket)) != HAL_OK)
 {
        Error_Handler(); // Eğer SPI başlatılamazsa hata ver.
    }

  g_motors[0] = (MotorCtrl_t){&MOTOR_FL_PWM_TIM, MOTOR_FL_PWM_CHANNEL, MOTOR_FL_DIR_PORT, MOTOR_FL_DIR_PIN};
  g_motors[1] = (MotorCtrl_t){&MOTOR_FR_PWM_TIM, MOTOR_FR_PWM_CHANNEL, MOTOR_FR_DIR_PORT, MOTOR_FR_DIR_PIN};
  g_motors[2] = (MotorCtrl_t){&MOTOR_BL_PWM_TIM, MOTOR_BL_PWM_CHANNEL, MOTOR_BL_DIR_PORT, MOTOR_BL_DIR_PIN};
  g_motors[3] = (MotorCtrl_t){&MOTOR_BR_PWM_TIM, MOTOR_BR_PWM_CHANNEL, MOTOR_BR_DIR_PORT, MOTOR_BR_DIR_PIN};

  g_encoders[0].htim = &htim5; //sol ön
  g_encoders[1].htim = &htim2; //sağ ön
  g_encoders[2].htim = &htim3; //sol arka
  g_encoders[3].htim = &htim4; //sağ arka

  float Q_hiz = 0.01f, P_hiz = 1.0f;
  uint32_t now = HAL_GetTick(); // Bu satırı döngünün üzerine ekleyin
    for(int i=0; i < 4; i++) {
        g_encoders[i].last_count_u32 = (uint32_t)__HAL_TIM_GET_COUNTER(g_encoders[i].htim);
        g_encoders[i].last_update_ms = now; // Bu satırı ekleyin
        Kalman_Init(&g_encoders[i].speed_filter, Q_hiz, R_HIZ_NORMAL, P_hiz, 0.0f);
    }

  float Q_angle = 0.001f, Q_bias = 0.03f, R_measure = 0.03f;

  Kalman_InitAngle(&aciFiltresi_Roll, Q_angle, Q_bias, R_measure);
  Kalman_InitAngle(&aciFiltresi_Pitch, Q_angle, Q_bias, R_measure);
  Kalman_InitAngle(&aciFiltresi_Yaw, Q_angle, Q_bias, R_measure);
  I2C_Scanner();
  bno055_assignI2C(&hi2c2);
  bno055_setup();
  bno055_setOperationModeNDOF();
  HAL_Delay(100);
 uint8_t chip_id = 0;
  bno055_readData(BNO055_CHIP_ID, &chip_id, 1);
  imu_baslatildi = (chip_id == BNO055_ID);
  printf("BNO055 Durumu: %s\n", imu_baslatildi ? "Basarili" : "HATA");

    fflush(stdout);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_calculation_time = HAL_GetTick();

  uint32_t last_rgb_toggle_time = 0;

  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  if (HAL_GetTick() - last_rgb_toggle_time >= 1000) // 1 saniyede bir yanıp söner
	  	  {
	  		  last_rgb_toggle_time = HAL_GetTick();
	  		  HAL_GPIO_TogglePin(RGB_GPIO_Port, RGB_Pin);
	  	  }

	  	  // --- ANA KONTROL DÖNGÜSÜ ---
	  	  // Bu blok, RAMP_UPDATE_PERIOD_MS ile belirlenen periyotta (örn: 20ms) bir çalışır.
	  	  if (HAL_GetTick() - last_calculation_time >= RAMP_UPDATE_PERIOD_MS)
	  	  {
	  		  // 1. ADIM: GEÇEN SÜREYİ HESAPLA
	  		  uint32_t now = HAL_GetTick();
	  		  float delta_time_sec = (now - last_calculation_time) / 1000.0f;
	  		  last_calculation_time = now;

	  		  // Sadece zaman ileri aktıysa devam et
	  		  if (delta_time_sec > 0.0f)
	  		  {
	  			  // 2. ADIM: ÇİZGİ SENSÖRLERİNİ OKU
	  			  ReadLineSensors();

	  			  // Çizgi takibi modu aktif mi?
	  			  if (g_line_tracking_active) {
	  				  // Aktifse, sensör verilerine göre robotu kontrol et
	  				  ControlRobotWithLineSensor();
	  			  } else {
	  				  // Aktif değilse, SPI'dan gelen komutlara göre robotu kontrol etmeye devam et
	  				  // NOT: Bu blok boş bırakılmıştır çünkü SetRobotMovement() zaten SPI callback'i içinde çağrılıyor.
	  			  }

	  			  // 3. ADIM: SENSÖR HESAPLAMALARINI VE IMU VERİLERİNİ GÜNCELLE
	  			  UpdateSensorCalculations(delta_time_sec);

	  			  // 4. ADIM: MOTORLARI HEDEFE GÖRE SÜR
	  			  UpdatePWMWithRamp();

	  			  // 5. ADIM: BİR SONRAKİ GÖNDERİM İÇİN TELEMETRİ PAKETİNİ HAZIRLA
	  			  g_spi_tx_packet.speed_rpm_fl = g_encoders[MOTOR_SOL_ON].speed_rpm;
	  			  g_spi_tx_packet.speed_rpm_fr = g_encoders[MOTOR_SAG_ON].speed_rpm;
	  			  g_spi_tx_packet.speed_rpm_bl = g_encoders[MOTOR_SOL_ARKA].speed_rpm;
	  			  g_spi_tx_packet.speed_rpm_br = g_encoders[MOTOR_SAG_ARKA].speed_rpm;

	  			  g_spi_tx_packet.total_distance_cm = g_ortalama_mesafe_cm;
	  			  g_spi_tx_packet.checksum = crc8((uint8_t*)&g_spi_tx_packet, sizeof(StmToJetson_TelemetryPacket) - 1 - 2); // 33 bayt

	  			  // 6. ADIM: DEVAM EDEN MANEVRALARI KONTROL ET (örn: 360 derece dönüş)
	  			  if (g_robot_anlik_durum == ROBOT_STATE_MANEUVERING)
	  			  {
	  				  if (g_manevra_basladi && imu_baslatildi) {
	  					  g_hedef_yaw = aciFiltresi_Yaw.angle;
	  					  g_manevra_basladi = false;
	  				  }

	  				  float anlik_yaw = aciFiltresi_Yaw.angle;
	  				  float fark = g_hedef_yaw - anlik_yaw;

	  				  if (fark > 180.0f) fark -= 360.0f;
	  				  if (fark < -180.0f) fark += 360.0f;

	  				  if (fabsf(fark) < 5.0f && g_manevra_basladi == false)
	  				  {
	  					  SetRobotMovement(0, 0, 0);
	  					  g_robot_anlik_durum = ROBOT_STATE_IDLE;
	  					  g_robot_calisiyor = false;
	  				  }
	  			  }
	  		  }
	  	  } // --- ANA KONTROL DÖNGÜSÜ SONU ---

	  	  // Geri hareket sırasında buzzer'ı çalıştır
	  	  if (g_current_robot_state == MOTOR_GERI && g_robot_calisiyor) {
	  		  if (HAL_GetTick() - g_last_buzzer_toggle_time >= BUZZER_TOGGLE_PERIOD_MS) {
	  			  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
	  			  g_last_buzzer_toggle_time = HAL_GetTick();
	  		  }
	  	  } else {
	  		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
	  	  }
	  	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
  ADC_ChannelConfTypeDef sConfig = {0};

  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = LINE_SENSOR_COUNT;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) { Error_Handler(); }

  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) { Error_Handler(); }

  sConfig.Channel = ADC_CHANNEL_9;
  sConfig.Rank = 3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) { Error_Handler(); }

  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = 4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) { Error_Handler(); }

  sConfig.Channel = ADC_CHANNEL_11;
  sConfig.Rank = 5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) { Error_Handler(); }

  sConfig.Channel = ADC_CHANNEL_12;
  sConfig.Rank = 6;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) { Error_Handler(); }

  sConfig.Channel = ADC_CHANNEL_13;
  sConfig.Rank = 7;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) { Error_Handler(); }

  sConfig.Channel = ADC_CHANNEL_14;
  sConfig.Rank = 8;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) { Error_Handler(); }
}

void ReadLineSensors(void)
{
    HAL_ADC_Start(&hadc1);

    for (int i = 0; i < LINE_SENSOR_COUNT; i++) {
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
            sensor_values[i] = HAL_ADC_GetValue(&hadc1);
        } else {
            sensor_values[i] = 0;
        }
    }
    HAL_ADC_Stop(&hadc1);
}

void ControlRobotWithLineSensor(void)
{
    float straight_speed = 0.5f;
    float turn_speed = 0.5f;

    bool is_on_line = false;
    for (int i = 0; i < LINE_SENSOR_COUNT; i++) {
        if (sensor_values[i] > SENSOR_THRESHOLD) {
            is_on_line = true;
            break;
        }
    }

    if (!is_on_line) {
        SetRobotMovement(0, 0, 0);
        return;
    }

    if (sensor_values[3] > SENSOR_THRESHOLD || sensor_values[4] > SENSOR_THRESHOLD) {
        SetRobotMovement(straight_speed, 0, 0);
    }
    else if (sensor_values[0] > SENSOR_THRESHOLD || sensor_values[1] > SENSOR_THRESHOLD || sensor_values[2] > SENSOR_THRESHOLD) {
        SetRobotMovement(0, 0, -turn_speed);
    }
    else if (sensor_values[5] > SENSOR_THRESHOLD || sensor_values[6] > SENSOR_THRESHOLD || sensor_values[7] > SENSOR_THRESHOLD) {
        SetRobotMovement(0, 0, turn_speed);
    }
}


/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
  hi2c2.Init.ClockSpeed = 100000;
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_SLAVE;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 8999;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 12;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 12;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 65535;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 12;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 12;
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 0;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 4294967295;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}

/**
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
  htim11.Init.Prescaler = 0;
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim11.Init.Period = 65535;
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|GPIO_PIN_3|SAG_ARKA_MOTOR_DIR_Pin|SOL_ARKA_MOTOR_DIR_Pin
                          |SOL_ON_MOTOR_DIR_Pin|SAG_ON_MOTOR_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_GPIO_Port, RGB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUZZER_Pin PC3 SAG_ARKA_MOTOR_DIR_Pin SOL_ARKA_MOTOR_DIR_Pin
                           SOL_ON_MOTOR_DIR_Pin SAG_ON_MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GPIO_PIN_3|SAG_ARKA_MOTOR_DIR_Pin|SOL_ARKA_MOTOR_DIR_Pin
                          |SOL_ON_MOTOR_DIR_Pin|SAG_ON_MOTOR_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : ACIL_STOP_BUTON_Pin */
  GPIO_InitStruct.Pin = ACIL_STOP_BUTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(ACIL_STOP_BUTON_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : RGB_Pin */
  GPIO_InitStruct.Pin = RGB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RGB_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

static int32_t encoder_delta_uint32(uint32_t prev, uint32_t curr, uint32_t timer_max_plus_one)
{
    uint32_t half_max = timer_max_plus_one / 2;
    int32_t diff = (int32_t)(curr - prev);

    if (diff > half_max) {
        diff = diff - timer_max_plus_one;
    } else if (diff < -half_max) {
        diff = diff + timer_max_plus_one;
    }
    return diff;
}



void SetSingleMotor(TIM_HandleTypeDef* htim, uint32_t channel, GPIO_TypeDef* dir_port, uint16_t dir_pin, MotorDirection_t dir, uint32_t speed)
{
    if (speed == 0) {
        __HAL_TIM_SET_COMPARE(htim, channel, 0);
        return; // Don't change direction if stopping
    }
    HAL_GPIO_WritePin(dir_port, dir_pin, (dir == DIR_FORWARD) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    __HAL_TIM_SET_COMPARE(htim, channel, speed);
}

void UpdatePWMWithRamp(void)
{
    for(int i=0; i<4; i++){
        if (g_motors[i].current_pwm < g_motors[i].target_pwm) {
            g_motors[i].current_pwm += RAMP_STEP;
            if(g_motors[i].current_pwm > g_motors[i].target_pwm) g_motors[i].current_pwm = g_motors[i].target_pwm;
        } else if (g_motors[i].current_pwm > g_motors[i].target_pwm) {
            if(g_motors[i].current_pwm < RAMP_STEP) g_motors[i].current_pwm = 0;
            else g_motors[i].current_pwm -= RAMP_STEP;
        }
        SetSingleMotor(g_motors[i].htim, g_motors[i].channel, g_motors[i].dir_port, g_motors[i].dir_pin, g_motors[i].dir, g_motors[i].current_pwm);
    }
}

void SetRobotMovement(float vx, float vy, float w)
{
    float wheel_speeds[4];
    wheel_speeds[MOTOR_SOL_ON]   = vx - vy + w;
    wheel_speeds[MOTOR_SAG_ON]   = vx + vy - w;
    wheel_speeds[MOTOR_SOL_ARKA] = vx + vy + w;
    wheel_speeds[MOTOR_SAG_ARKA] = vx - vy - w;

    float max_speed = 0.0f;
    for (int i = 0; i < 4; i++) {
        if (fabsf(wheel_speeds[i]) > max_speed) {
            max_speed = fabsf(wheel_speeds[i]);
        }
    }
    if (max_speed > 1.0f) {
        for (int i = 0; i < 4; i++) {
            wheel_speeds[i] /= max_speed;
        }
    }

    // Hızı (-1.0 ile 1.0 arası) doğrudan hedef PWM'e ve yöne çevir
    for (int i = 0; i < 4; i++) {

            // Sağ Ön (indeks 1) ve Sağ Arka (indeks 3) motorların yönünü TERS ÇEVİR
            if (i == MOTOR_SAG_ON || i == MOTOR_SAG_ARKA) {
                // Ters Mantık: Yazılım 'ileri' dediğinde motor 'geri' dönsün
                if (wheel_speeds[i] >= 0) {
                    g_motors[i].dir = DIR_BACKWARD; // Pozitif hız = Geri dön
                } else {
                    g_motors[i].dir = DIR_FORWARD;  // Negatif hız = İleri dön
                }
            }
            else {
                // Normal Mantık (Sol taraf motorları için)
                if (wheel_speeds[i] >= 0) {
                    g_motors[i].dir = DIR_FORWARD;
                } else {
                    g_motors[i].dir = DIR_BACKWARD;
                }
            }

            // PWM değeri her zaman hızın mutlak değeri olduğu için bu satır aynı kalır
            g_motors[i].target_pwm = (uint32_t)(fabsf(wheel_speeds[i]) * MAX_PWM);
        }

    // Geri giderken buzzer için durumu güncelle
    if (vx < 0) {
        g_current_robot_state = MOTOR_GERI;
    } else if (vx == 0 && vy == 0 && w == 0) {
        g_current_robot_state = MOTOR_DURDU;
    } else {
        g_current_robot_state = MOTOR_ILERI;
    }
}

void UpdateSensorCalculations(float delta_time_sec)
{
    // DEĞİŞİKLİK: Fonksiyonun başındaki tüm zaman hesaplama kodları (static değişken, if, now, vb.) SİLİNDİ.

    // --- Enkoder Hesaplamaları ---
    for(int i=0; i<4; i++)
    {
        // delta_time_sec'i burada tekrar hesaplamıyoruz, parametre olarak gelen hazır değeri kullanıyoruz.

        uint32_t current_count_u32 = (uint32_t)__HAL_TIM_GET_COUNTER(g_encoders[i].htim);
        uint32_t timer_max = __HAL_TIM_GET_AUTORELOAD(g_encoders[i].htim);
        int32_t count_delta = encoder_delta_uint32(g_encoders[i].last_count_u32, current_count_u32, timer_max + 1);
        g_encoders[i].last_count_u32 = current_count_u32;

        // Parametre olarak gelen tek delta_time_sec'i kullan
        float raw_speed_rpm = ((float)count_delta / ENCODER_PPR) / (delta_time_sec / 60.0f);

        // ... (Kalman filtre kodun aynı kalacak) ...
        float filtered_speed = Kalman_Update(&g_encoders[i].speed_filter, raw_speed_rpm);
        if (fabsf(raw_speed_rpm) < 1.0f) {
            filtered_speed = 0.0f;
            Kalman_Reset(&g_encoders[i].speed_filter, 0.0f);
        }
        g_encoders[i].speed_rpm = filtered_speed;

        float revolutions = (float)count_delta / ENCODER_PPR;
        float delta_cm = revolutions * WHEEL_CIRCUMFERENCE_CM;
        g_encoders[i].total_distance_cm += delta_cm;
    }

    // Ortalama mesafeyi hesapla
    g_ortalama_mesafe_cm = (g_encoders[0].total_distance_cm + g_encoders[1].total_distance_cm + g_encoders[2].total_distance_cm + g_encoders[3].total_distance_cm) / 4.0f;

    // --- IMU Hesaplamaları ---
    if (imu_baslatildi) {
        // Sensörden gelen Raw verileri alıyoruz
        bno055_vector_t gyro = bno055_getVectorGyroscope();

        // BNO055'in dahili sensör füzyonundan gelen işlenmiş Euler açılarını alıyoruz
        // Bu veri, jiroskop, ivmeölçer ve manyetometre verilerinin birleşiminden elde edilir.
        bno055_vector_t euler = bno055_getVectorEuler();

        // Kalman filtrelerini BNO055'in Euler açısı verileriyle güncelliyoruz.
        // euler.x = Yaw (Heading)
        // euler.y = Roll
        // euler.z = Pitch
        Kalman_UpdateAngle(&aciFiltresi_Yaw, euler.x, gyro.z, delta_time_sec);
        Kalman_UpdateAngle(&aciFiltresi_Roll, euler.y, gyro.x, delta_time_sec);
        Kalman_UpdateAngle(&aciFiltresi_Pitch, euler.z, gyro.y, delta_time_sec);

        // Filtrelenmiş açıları telemetri paketine kaydediyoruz.
        g_spi_tx_packet.imu_yaw = aciFiltresi_Yaw.angle;
        g_spi_tx_packet.imu_roll = aciFiltresi_Roll.angle;
        g_spi_tx_packet.imu_pitch = aciFiltresi_Pitch.angle;
    }

}
uint8_t crc8(const uint8_t* data, size_t len) {
    uint8_t crc = 0;
    for (size_t i = 0; i < len; i++) {
        crc ^= data[i];
        for (int j = 0; j < 8; j++) {
            if (crc & 0x80) crc = (crc << 1) ^ 0x07;
            else crc <<= 1;
        }
    }
    return crc;
}
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
    if (hspi->Instance == SPI2)
    {

    	uint8_t calc_checksum = crc8((uint8_t*)&g_spi_rx_packet, 2);
        if (calc_checksum != g_spi_rx_packet.checksum)
        {
            HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t*)&g_spi_tx_packet,
                                       (uint8_t*)&g_spi_rx_packet,
                                       sizeof(StmToJetson_TelemetryPacket));
            return;
        }

        // Checksum doğru, komutu işle
        float vx = 0.0f, vy = 0.0f, w = 0.0f;
        const float FULL_SPEED = 1.0f;

        switch (g_spi_rx_packet.command_id)
        {
        	case 0x07: // ROBOT_CMD_START_LINE_TRACKING için yeni bir ID belirledim (0x07)
                   g_line_tracking_active = true;
                   break;
            case 0x08: // ROBOT_CMD_STOP_LINE_TRACKING için yeni bir ID belirledim (0x08)
                   g_line_tracking_active = false;
                   SetRobotMovement(0, 0, 0);
                   break;

            case ROBOT_CMD_STOP:
                g_robot_anlik_durum = ROBOT_STATE_IDLE;
                g_robot_calisiyor = false;
                break;
            case ROBOT_CMD_FORWARD:
                vx = FULL_SPEED;
                g_robot_anlik_durum = ROBOT_STATE_CONTINUOUS;
                g_robot_calisiyor = true;
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);


                break;
            case ROBOT_CMD_BACKWARD:
                vx = -FULL_SPEED;
                g_robot_anlik_durum = ROBOT_STATE_CONTINUOUS;
                g_robot_calisiyor = true;
                break;
            case ROBOT_CMD_STRAFE_RIGHT:
                vy = -FULL_SPEED;
                g_robot_anlik_durum = ROBOT_STATE_CONTINUOUS;
                g_robot_calisiyor = true;
                break;
            case ROBOT_CMD_STRAFE_LEFT:
                vy = FULL_SPEED;
                g_robot_anlik_durum = ROBOT_STATE_CONTINUOUS;
                g_robot_calisiyor = true;
                break;
            case ROBOT_CMD_MANEUVER_TURN_360_RIGHT:
                if (g_robot_anlik_durum != ROBOT_STATE_MANEUVERING) {
                    g_robot_anlik_durum = ROBOT_STATE_MANEUVERING;
                    g_manevra_basladi = true;
                    w = -FULL_SPEED;
                }
                break;
            case ROBOT_CMD_MANEUVER_TURN_360_LEFT:
                if (g_robot_anlik_durum != ROBOT_STATE_MANEUVERING) {
                    g_robot_anlik_durum = ROBOT_STATE_MANEUVERING;
                    g_manevra_basladi = true;
                    w = FULL_SPEED;
                }
                break;
            default:
                g_robot_anlik_durum = ROBOT_STATE_IDLE;
                break;
        }

        SetRobotMovement(vx, vy, w);

        HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t*)&g_spi_tx_packet,
                                   (uint8_t*)&g_spi_rx_packet,
                                   sizeof(StmToJetson_TelemetryPacket));
    }
}

void I2C_Scanner(void)
{
  printf("I2C Hatti Taraniyor...\n");
  fflush(stdout);
  uint8_t device_count = 0;
  for(uint8_t i = 1; i < 128; i++)
  {
    if (HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i << 1), 2, 10) == HAL_OK)
    {
      printf("--> I2C cihazi bulundu, adres: 0x%02X\n", i);
      fflush(stdout);
      device_count++;
    }
  }
  if (device_count == 0) {
    printf("--> Tarama tamamlandi, hatta bagli cihaz bulunamadi.\n");
  } else {
    printf("--> Tarama tamamlandi. Toplam %d cihaz bulundu.\n", device_count);
  }
  fflush(stdout);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
